import{_ as l,a as e,o as a,aR as p}from"./chunks/framework.Dl98zJwX.js";const d=JSON.parse('{"title":"Rollup 和 webpack 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/webpack/11.讲一下 Rollup 和 webpack 的区别.md","filePath":"前端/面试题/webpack/11.讲一下 Rollup 和 webpack 的区别.md","lastUpdated":1721110150000}'),o={name:"前端/面试题/webpack/11.讲一下 Rollup 和 webpack 的区别.md"},r=p('<h1 id="rollup-和-webpack-的区别" tabindex="-1">Rollup 和 webpack 的区别 <a class="header-anchor" href="#rollup-和-webpack-的区别" aria-label="Permalink to &quot;Rollup 和 webpack 的区别&quot;">​</a></h1><p>它是模块化打包工具，它不是替代 webpack，尽可能高效地构建精简且易分发的 JavaScript 库，只是让打包代码更小更快，配置精简，专门针对类库的打包</p><h2 id="rollup" tabindex="-1">Rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;Rollup&quot;">​</a></h2><ul><li>打包库</li><li>rollup 小而美 打包体积小、代码精简、代码注入少</li></ul><h2 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h2><ul><li>打包一个应用</li><li>代码分割、静态资源导入</li></ul><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p>@rollup/plugin-json 解析 json 文件 @rollup/plugin-node-resolve 可以到 node_module 查找模块 import { stringify } from &#39;qs&#39;; @rollup/plugin-commonjs commonjs 模块转化成 es6 @rollup/plugin-eslint @rollup/plugin-typescript rollup-plugin-terser</p><p>@rollup/plugin-babel plugins: [babel({ babelHelpers: &#39;bundled&#39; })]</p><ul><li>inline 每个文件都插入</li><li>external @babel/plugin-external-helpers</li><li>bundled 每个帮手一个副本</li><li>runtime 它必须与@babel/plugin-transform-runtime相结合使用</li></ul><p>babel 在转译的过程中， 对 syntax 的处理可能会使用到 helper 函数， 对 api 的处理会引入 polyfill。 问题： 全局变量（引入 polyfill 时会直接修改全局变量及其原型，造成原型污染） helper 重复（babel 在每个需要使用 helper 的地方都会定义一个 helper，导致最终的产物里有大量重复的 helper；</p><p>@babel/plugin-transform-runtime 的作用是将 helper 和 polyfill 都改为从一个统一的地方引入，并且引入的对象和全局变量是完全隔离的，这样解决了上面的两个问题。</p><h2 id="如何选择" tabindex="-1">如何选择 <a class="header-anchor" href="#如何选择" aria-label="Permalink to &quot;如何选择&quot;">​</a></h2><p>如果你需要进行代码分割，或者你有很多的静态资源，再或者你做的东西深度依赖 CommonJS，毫无疑问 Webpack 是你的最佳选择。如果你的代码基于 ES2015 模块编写，并且你做的东西是准备给他人使用的，你或许可以考虑使用 Rollup。</p>',14),i=[r];function t(n,u,c,s,b,_){return a(),e("div",null,i)}const m=l(o,[["render",t]]);export{d as __pageData,m as default};
