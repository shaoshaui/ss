import{_ as a,a as e,o as l,aR as t}from"./chunks/framework.Dl98zJwX.js";const m=JSON.parse('{"title":"引用类型怎么存储","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/js/5.引用类型怎么存储，js 中的堆和栈有什么区别.md","filePath":"前端/面试题/js/5.引用类型怎么存储，js 中的堆和栈有什么区别.md","lastUpdated":1721110150000}'),_={name:"前端/面试题/js/5.引用类型怎么存储，js 中的堆和栈有什么区别.md"},i=t('<h1 id="引用类型怎么存储" tabindex="-1">引用类型怎么存储 <a class="header-anchor" href="#引用类型怎么存储" aria-label="Permalink to &quot;引用类型怎么存储&quot;">​</a></h1><ul><li>栈存放的是：地址(通过该地址，可以找到堆存放的真正值)</li><li>堆存放的是：真正值， 我们将一个对象赋值给另一个对象，实际上是地址的赋值，地址对应的堆存放着真正的数值；</li></ul><h2 id="栈-stack" tabindex="-1">栈 stack <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈 stack&quot;">​</a></h2><ul><li>是什么：栈存放的是基础数据的数值，和引用类型的地址</li><li>特点： <ul><li>连续有序：栈空间连续，增加删除只需要移动指针，操作速度很快</li><li>空间有限：栈满了会抛错</li></ul></li><li>何时创建：执行函数时创建，函数执行完毕，栈就会销毁</li><li>应用场景：push pop</li></ul><h2 id="堆-heap" tabindex="-1">堆 heap <a class="header-anchor" href="#堆-heap" aria-label="Permalink to &quot;堆 heap&quot;">​</a></h2><ul><li>是什么：堆用于存储 js 中的引用类型</li><li>特点：容量大，不连续，使用灵活存储操作慢。不需要连续空间，或则会申请内容较大</li></ul>',6),s=[i];function o(r,c,n,h,d,u){return l(),e("div",null,s)}const f=a(_,[["render",o]]);export{m as __pageData,f as default};
