import{_ as e,a,o as i,aR as l}from"./chunks/framework.Dl98zJwX.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/css/6.BFC 应用、盒子模型.md","filePath":"前端/面试题/css/6.BFC 应用、盒子模型.md","lastUpdated":1720604888000}'),t={name:"前端/面试题/css/6.BFC 应用、盒子模型.md"},o=l(`<h2 id="css-盒模型" tabindex="-1">CSS 盒模型 <a class="header-anchor" href="#css-盒模型" aria-label="Permalink to &quot;CSS 盒模型&quot;">​</a></h2><h3 id="标准模型-ie-模型" tabindex="-1">标准模型+IE 模型 <a class="header-anchor" href="#标准模型-ie-模型" aria-label="Permalink to &quot;标准模型+IE 模型&quot;">​</a></h3><pre><code>标准: margin padding border content
IE模型: 宽高包括 padding border
</code></pre><h3 id="标准模型-ie-区别-计算宽高不同" tabindex="-1">标准模型/IE 区别 计算宽高不同 <a class="header-anchor" href="#标准模型-ie-区别-计算宽高不同" aria-label="Permalink to &quot;标准模型/IE 区别 计算宽高不同&quot;">​</a></h3><pre><code>标准: 宽度不包括padding border
IE模型: 宽高包括 padding border
</code></pre><h3 id="css-如何设置这两种模型" tabindex="-1">CSS 如何设置这两种模型 <a class="header-anchor" href="#css-如何设置这两种模型" aria-label="Permalink to &quot;CSS 如何设置这两种模型&quot;">​</a></h3><pre><code>box-sizing:content-box  //标准 浏览器默认
box-sizing:border-box   //IE
</code></pre><h3 id="js-如何设置获取盒模型对应的宽高" tabindex="-1">js 如何设置获取盒模型对应的宽高 <a class="header-anchor" href="#js-如何设置获取盒模型对应的宽高" aria-label="Permalink to &quot;js 如何设置获取盒模型对应的宽高&quot;">​</a></h3><pre><code>dom.style.width/height  只能取dom节点的内敛属性, link style节点这两种方式不支持
dom.currentStyle.width/height 三种方法，浏览器计算之后相对准确的  缺：只有IE支持
window.getComputedStyle(dom).width/height 兼容性好
dom.getBoundingClientRect().width/height 绝对位置 相对viewport的left top width height四个值
</code></pre><h3 id="盒模型解释边距重叠" tabindex="-1">盒模型解释边距重叠 <a class="header-anchor" href="#盒模型解释边距重叠" aria-label="Permalink to &quot;盒模型解释边距重叠&quot;">​</a></h3><h3 id="bfc-边距重叠解决" tabindex="-1">BFC(边距重叠解决) <a class="header-anchor" href="#bfc-边距重叠解决" aria-label="Permalink to &quot;BFC(边距重叠解决)&quot;">​</a></h3><p>基本概念：块级格式化上下文 原理(渲染规则) 1: 同一个 BFC 内在垂直方向上会发生重叠 2: BFC 区域不会与浮动元素的 box 重叠 3: BFC 是个独立，外面元素不会影响到里面的，反过来也成立 4: 计算 BFC 高度的时候，浮动元素也参与计算 如何创建 BFC 1: float != none 2: position != static/relative 3: display == table 系列 table-cell、table-caption 4: overflow != visibile</p><h3 id="为什么有-bfc" tabindex="-1">为什么有 BFC <a class="header-anchor" href="#为什么有-bfc" aria-label="Permalink to &quot;为什么有 BFC&quot;">​</a></h3><ul><li>浏览器渲染过程中，会遇到一些问题， <ul><li>1、被浮动包裹的父容器没有高度</li><li>2、同一个 BFC 内在垂直方向上会发生重叠</li><li>3、多栏布局，浮动与未浮动元素发生覆盖</li></ul></li></ul><h2 id="bfc-定义" tabindex="-1">BFC 定义 <a class="header-anchor" href="#bfc-定义" aria-label="Permalink to &quot;BFC 定义&quot;">​</a></h2><ul><li>页面隔离的容器，内部元素和外部元素不会相互影响</li></ul><h3 id="bfc解决了那些问题" tabindex="-1">BFC解决了那些问题 <a class="header-anchor" href="#bfc解决了那些问题" aria-label="Permalink to &quot;BFC解决了那些问题&quot;">​</a></h3><ul><li>1、浮动父容器没高度：浮动元素也参与高度计算，父容器 float: left; 或者 overflow: hidden; table: table-cell</li><li>2、垂直方向重叠：创建两个 BFC, overflow: hidden; 或者 display: inline-block;</li><li>3、BFC 区域不会与浮动元素的 box 重叠</li></ul><h2 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-label="Permalink to &quot;清除浮动&quot;">​</a></h2><blockquote><p>浮动元素脱离文档流，导致父元素管不了，父元素高度坍塌问题</p></blockquote><ul><li>父级也设置 浮动、设置高度、父级增加 定位 position: absolute</li><li>overflow:hidden</li><li>末尾增加空元素进行clear clear: both</li><li>给父级添加伪元素进行clear</li></ul>`,21),r=[o];function d(n,h,c,s,b,u){return i(),a("div",null,r)}const f=e(t,[["render",d]]);export{p as __pageData,f as default};
