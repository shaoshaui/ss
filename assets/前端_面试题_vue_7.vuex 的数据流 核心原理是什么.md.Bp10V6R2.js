import{_ as i,a,aQ as t,o as n}from"./chunks/framework.CqV2UAXh.js";const o=JSON.parse('{"title":"vuex 的数据流 核心原理是什么","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/vue/7.vuex 的数据流 核心原理是什么.md","filePath":"前端/面试题/vue/7.vuex 的数据流 核心原理是什么.md","lastUpdated":1727172427000}'),e={name:"前端/面试题/vue/7.vuex 的数据流 核心原理是什么.md"};function p(h,s,l,k,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="vuex-的数据流-核心原理是什么" tabindex="-1">vuex 的数据流 核心原理是什么 <a class="header-anchor" href="#vuex-的数据流-核心原理是什么" aria-label="Permalink to &quot;vuex 的数据流 核心原理是什么&quot;">​</a></h1><p>actions 更新 mutations，修改 state</p><p>核心，在每个组件中挂载 $store vue data 组件有 store 就是响应式</p><p>dispatch 匹配到 store 存放的 action 方法 commit 的时候匹配 mutations 方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$options.store) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$options.store; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根结点赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$parent.$store; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每个实例都会有父亲。故一层层给实例赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,5)]))}const g=i(e,[["render",p]]);export{o as __pageData,g as default};
