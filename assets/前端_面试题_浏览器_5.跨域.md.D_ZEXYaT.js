import{_ as a,a as s,o as i,aR as e}from"./chunks/framework.Dl98zJwX.js";const u=JSON.parse('{"title":"JSONP","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/浏览器/5.跨域.md","filePath":"前端/面试题/浏览器/5.跨域.md","lastUpdated":1721110996000}'),t={name:"前端/面试题/浏览器/5.跨域.md"},o=e(`<h3 id="跨域几种方式" tabindex="-1">跨域几种方式 <a class="header-anchor" href="#跨域几种方式" aria-label="Permalink to &quot;跨域几种方式&quot;">​</a></h3><ul><li>同源策略: 协议 域名 端口号 同域</li><li>什么是跨域:浏览器有同源策略，不允许 ajax 访问其他域接口</li><li>跨域条件： 协议 域名 端口号，有一个不同就是跨域</li></ul><h1 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h1><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jsonp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;head&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="cors-正向代理-浏览器知道真正返回数据的地址" tabindex="-1">cors - 正向代理 (浏览器知道真正返回数据的地址) <a class="header-anchor" href="#cors-正向代理-浏览器知道真正返回数据的地址" aria-label="Permalink to &quot;cors - 正向代理 (浏览器知道真正返回数据的地址)&quot;">​</a></h1><ul><li>只服务端设置头 Access-Control-Allow-Origin 即可，前端</li></ul><h1 id="http-proxy-反响代理" tabindex="-1">http-proxy - 反响代理 <a class="header-anchor" href="#http-proxy-反响代理" aria-label="Permalink to &quot;http-proxy - 反响代理&quot;">​</a></h1><ul><li>http-proxy-middleware</li></ul><h1 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h1><p>add_header &quot;Access-Control-Allow-Origin&quot; &quot;*&quot;;</p><h1 id="webscoket" tabindex="-1">webscoket <a class="header-anchor" href="#webscoket" aria-label="Permalink to &quot;webscoket&quot;">​</a></h1><p>ws</p><h1 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h1><h2 id="postmessage-window-open" tabindex="-1">PostMessage - window.open <a class="header-anchor" href="#postmessage-window-open" aria-label="Permalink to &quot;PostMessage - window.open&quot;">​</a></h2><ul><li><code>window.open: const myPop = window.open(&#39;http://localhost:9000&#39;, &#39;myWindow&#39;)</code></li><li><code>postMessage: myPop.postMessage(&#39;abc&#39;, &#39;http://localhost:9000&#39;);</code></li><li><code>addEventListener-message: window.addEventListener(&#39;message&#39;, (event) =&gt; {})</code></li><li><code>event.source.postMessage(&#39;to A&#39;, &#39;http://localhost:8080&#39;)</code></li></ul><h2 id="postmessage-iframe" tabindex="-1">PostMessage - iframe <a class="header-anchor" href="#postmessage-iframe" aria-label="Permalink to &quot;PostMessage - iframe&quot;">​</a></h2><blockquote><p>from 里面有 ifrme to</p></blockquote><ul><li><code>from: iframe.contentWindow.postMessage(&#39;发送给 to&#39;, &#39;http://localhost:9000&#39;);</code></li><li><code>to: window.parent.postMessage(&#39;发送给 from&#39;, &#39;http://localhost:8080&#39;);</code></li></ul><h2 id="document-domain" tabindex="-1">document.domain <a class="header-anchor" href="#document-domain" aria-label="Permalink to &quot;document.domain&quot;">​</a></h2><blockquote><p>from 里面有 ifrme to</p></blockquote><ul><li>from: document.domain = &#39;test.com&#39;</li><li>to: document.domain = &#39;test.com&#39;</li></ul><h2 id="window-name" tabindex="-1">window.name <a class="header-anchor" href="#window-name" aria-label="Permalink to &quot;window.name&quot;">​</a></h2><p>iframe 加载好，修改 iframe.src 为同源</p><h2 id="location-hash" tabindex="-1">location.hash <a class="header-anchor" href="#location-hash" aria-label="Permalink to &quot;location.hash&quot;">​</a></h2><ul><li>记不住</li></ul>`,25),n=[o];function l(h,r,d,p,c,k){return i(),s("div",null,n)}const E=a(t,[["render",l]]);export{u as __pageData,E as default};
