import{_ as a,a as e,aQ as l,o}from"./chunks/framework.CqV2UAXh.js";const _=JSON.parse('{"title":"19.元素替换","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/css/19.元素替换.md","filePath":"前端/面试题/css/19.元素替换.md","lastUpdated":1727172427000}'),s={name:"前端/面试题/css/19.元素替换.md"};function i(r,t,c,d,n,p){return o(),e("div",null,t[0]||(t[0]=[l('<h1 id="_19-元素替换" tabindex="-1">19.元素替换 <a class="header-anchor" href="#_19-元素替换" aria-label="Permalink to &quot;19.元素替换&quot;">​</a></h1><p>可替换元素展现效果不是由 css 控制的，这些元素是一些外部现象，它们对于外观的渲染是独立于 css 的</p><h2 id="可替换元素" tabindex="-1">可替换元素 <a class="header-anchor" href="#可替换元素" aria-label="Permalink to &quot;可替换元素&quot;">​</a></h2><ul><li><p>iframe 不继承父类样式</p></li><li><p>img 渲染出来的图片，css 只能控制宽高不能控制具体内容</p></li><li><p>video embeb</p><p><code>&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code>都是替换元素。这些元素往往没有实际的内容，即是一个空元素。 canvas audio option object</p></li></ul><h2 id="不可替换元素" tabindex="-1">不可替换元素 <a class="header-anchor" href="#不可替换元素" aria-label="Permalink to &quot;不可替换元素&quot;">​</a></h2><p>(x)html 的大多数元素是不可替换元素，即其内容直接表现给用户端（例如浏览器）。如<code>&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;到&lt;h6&gt;、&lt;table&gt;</code>，等等。</p>',6)]))}const m=a(s,[["render",i]]);export{_ as __pageData,m as default};
