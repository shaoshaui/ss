import{_ as i,a as e,o as l,aR as t}from"./chunks/framework.Dl98zJwX.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端/面试题/算法/二叉树/index.md","filePath":"前端/面试题/算法/二叉树/index.md","lastUpdated":1721112922000}'),a={name:"前端/面试题/算法/二叉树/index.md"},_=t('<h2 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h2><ul><li>✅ 1、遍历：算法题-树结构遍历，如何实现一层一层的遍历？求二叉树，根路径到所有叶子结点的累加值之</li><li>✅ 2、反转</li><li>✅ 3、二叉树深度</li><li>✅ 4、每行最大值</li><li>✅ 5、二叉树轮廓</li><li>6、树结构转化数组、数组转化树结构</li><li>二叉搜索树 bst <ul><li>验证[中序]、恢复[数组、排序]、有序数组转化二叉搜索树[找数组中间为根]、有序链表、搜索第k个小元素[中序遍历第k]、搜索、插入</li></ul></li><li>对称二叉树[左右对比]、合并二叉树[左右相加]、平衡二叉树、完全二叉树节点个数[左右+1]</li><li>数组转化为二叉树 [2*index+1]</li><li>二叉树的所有路径</li><li>广度、深度</li></ul>',2),n=[_];function o(s,r,d,c,p,h){return l(),e("div",null,n)}const f=i(a,[["render",o]]);export{m as __pageData,f as default};
